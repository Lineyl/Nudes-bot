from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData

from tgbot.services.repository import Repo


class Withdraw(StatesGroup):
    InputCard = State()
    InputAmount = State()
    Confirm = State()


user_mm_kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
user_mm_kb.row(KeyboardButton("–ú–æ–∏ —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∏ üîó"))
user_mm_kb.row(KeyboardButton("–ë–∞–ª–∞–Ω—Å üí∞"))
user_mm_kb.insert(KeyboardButton("–ü–æ–º–æ—â—å üÜò"))
user_mm_kb.row(KeyboardButton("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ üìà"))
user_mm_kb.row(KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∫–∞—Ö"))

balance_kb = InlineKeyboardMarkup()
balance_kb.row(InlineKeyboardButton("–í—ã–≤–æ–¥", callback_data="withdraw"))

cancel_kb = ReplyKeyboardMarkup(resize_keyboard=True)
cancel_kb.row(KeyboardButton("–û—Ç–º–µ–Ω–∞"))

user_wc_cd = CallbackData("u", "action")
withdraw_confirmation_kb = InlineKeyboardMarkup()
withdraw_confirmation_kb.row(InlineKeyboardButton("–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=user_wc_cd.new("decline")))
withdraw_confirmation_kb.row(InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=user_wc_cd.new("accept")))

admin_wc_cd = CallbackData("a", "user_id", "amount", "action")


def get_withdraw_kb(user_id, amount):
    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton("‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=admin_wc_cd.new(user_id, amount, "accept")))
    markup.row(InlineKeyboardButton("‚ùå–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=admin_wc_cd.new(user_id, amount, "decline")))
    return markup


async def user_start(m: Message, repo: Repo, state: FSMContext):
    await state.finish()
    args = m.get_args()
    print(args)
    user = await repo.get_user(m.from_user.id)

    if not user:
        await repo.add_user(m.from_user.id, args)
        invited_by = await repo.find_user({"referral_info.code": args})
        if not invited_by:
            await m.bot.send_message(-1001542772472, f"""
<a href='tg://user?id={m.from_user.id}'>{m.from_user.full_name}</a>
ID: <code>{m.from_user.id}</code>

<code>/new_ref {m.from_user.id}</code>
<code>/set_procent {m.from_user.id}</code>
<code>/set_price {m.from_user.id}</code>
""")
        else:
            await m.bot.send_message(-1001542772472, f"""
<a href='tg://user?id={m.from_user.id}'>{m.from_user.full_name}</a>
ID: <code>{m.from_user.id}</code>
–ü—Ä–∏–≥–ª–∞—Å–∏–ª: <a href='tg://user?id={invited_by["user_id"]}'>{invited_by["user_id"]}</a>

<code>/new_ref {m.from_user.id}</code>
<code>/set_procent {m.from_user.id}</code>
<code>/set_price {m.from_user.id}</code>
<code>/set_ref_procent {m.from_user.id}</code>
""")
        await m.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        return
    elif user["status"] == 1:
        await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=user_mm_kb)
    else:
        await m.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")


async def user_referral(m: types.Message, repo: Repo):
    user = await repo.get_user(m.from_user.id)
    text = f"""<b>–í–∞—à–∞ —Ä–µ—Ñ —Å—Å—ã–ª–∫–∞:</b>
https://t.me/{(await m.bot.get_me()).username}?start={user['referral_info']['code']}

–ü—Ä–∏–≥–ª–∞—Å–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –≤ –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏ —Ö–æ—Ä–æ—à–∏–π % —Å –µ–≥–æ –¥–æ—Ö–æ–¥–∞.

<u>3-10%</u>

–î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —É—Å–ª–æ–≤–∏–π –Ω–∞–ø–∏—à–∏—Ç–µ @burja_purga

<b>ü§ù–î–æ—Ö–æ–¥ —Å –¥—Ä—É–∑–µ–π:</b> {user["stats"]["summary"]["profit_from_referrals"]}$
<b>üßÆ –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:</b>\n
"""
    for counter, ref in enumerate(user["referral_info"]["referrals"], start=1):
        text += f"""{counter}) <a href='tg://user?id={ref}'>{ref}</a>
<b>–ü–æ–ª—É—á–∏–ª–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: </b>{user["referral_info"]["referrals"][str(ref)]["profit"]}$
<b>–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –ø—Ä–∏–±—ã–ª–∏:</b> {user["referral_info"]["referrals"][str(ref)]["percent"]}%

"""
    await m.answer(text)


async def user_balance(m: types.Message, repo: Repo):
    user = await repo.get_user(m.from_user.id)
    await m.answer(f"""
<b>üè¶–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {user["balance"]}$
<b>ü§ù–î–æ—Ö–æ–¥ —Å –¥—Ä—É–≥–∞:</b> {user["stats"]["summary"]["profit_from_referrals"]}$
<b>üôá–ó–∞–ø—Ä–æ—à–µ–Ω–æ:</b> {user["to_withdraw"]}$
<b>üí∞–í—ã–ø–ª–∞—á–µ–Ω–æ –≤ —Å—É–º–º–µ:</b> {user["stats"]["summary"]["withdraws"]}$

ü™ô–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 6$

üßæ–ö–æ–º–∏—Å—Å–∏–∏ QIWI –∑–∞ –ø–µ—Ä–µ–≤–æ–¥:
ü•ùQIWI –∫–∞—Ä—Ç—ã: 2%
üí≥–ë–∞–Ω–∫. –∫–∞—Ä—Ç—ã: 2% + 1$""", reply_markup=balance_kb)


async def user_help(m: types.Message):
    await m.answer("""
<b>–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º</b> –ø–∏—Å–∞—Ç—å @burja_purga, –æ—Ç–≤–µ—Ç–∏—Ç –∏ —Ä–µ—à–∏—Ç –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã ‚úÖ

<b>–ù–µ –¥–æ—à–µ–ª –ø–ª–∞—Ç–µ–∂</b> –≤ —Ç–µ—á–µ–Ω–∏–∏ 30 –º–∏–Ω—É—Ç <b>–ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è</b> –≤—ã–ø–ª–∞—Ç—ã - —Å–æ–æ–±—â–∏ @burja_purga.

<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª</b>, –≥–¥–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –º–Ω–æ–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã: 
https://t.me/+WjqVF2_2yytmYWUy""", disable_web_page_preview=True)


def generate_user_links(bots, user):
    text = ""
    for counter, bot in enumerate(bots, start=1):
        text += f"""
üîó–†–µ—Ñ. —Å—Å—ã–ª–∫–∞ {counter}:
https://t.me/{bot["username"]}?start={user["referral_info"]["code"]}
üìä–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {user["stats"][str(bot["bot_id"])]["clicks"]}
üí∞–î–æ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ(–∑–∞ –∫–ª–∏–∫): {user["stats"][str(bot["bot_id"])]["profit_from_clicks"]}$
üí∞–î–æ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ(% —Å –ø—Ä–æ–¥–∞–∂): {user["stats"][str(bot["bot_id"])]["profit_from_purchases"]}$
"""

    text += f"""
üìà–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üìä–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user["stats"]["summary"]["clicks"]}
üí∞–î–æ—Ö–æ–¥ –∑–∞ –∫–ª–∏–∫: {user["stats"]["summary"]["profit_from_clicks"]}$
üí∞–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: {user["stats"]["summary"]["profit_from_purchases"]}$

    """
    return text


async def user_links(m: types.Message, repo: Repo):
    bots = await repo.get_bots()
    for bot in bots:
        await repo.update_users({"stats.{}".format(bot["bot_id"]): {"$exists": False}}, {"$set": {"stats.{}".format(bot["bot_id"]): {
            "profit_from_purchases": 0,
            "purchases": 0,
            "profit_from_clicks": 0,
            "profit_from_referrals": 0,
            "withdraws": 0,
            "clicks": 0
        }}})
    user = await repo.get_user(m.from_user.id)

    text = generate_user_links(bots, user)
    if len(text) > 4096:
        for x in range(0, len(text), 4096):
            await m.answer(text[x:x + 4096], disable_web_page_preview=True)
    else:
        await m.answer(text,disable_web_page_preview=True)


async def user_withdraw(c: types.CallbackQuery, repo: Repo):
    user = await repo.get_user(c.from_user.id)
    if user["balance"] < 6:
        await c.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã - 6$")
        return
    await c.message.delete()
    await c.message.answer("""
–í—ã <b>–∑–∞–ø—Ä–æ—Å–∏–ª–∏</b> –≤—ã–≤–æ–¥

–í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞
–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:""", reply_markup=cancel_kb)
    await Withdraw.InputCard.set()


async def user_input_card(m: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["card"] = m.text
    await m.answer(f"""
–ù–∞ –∫–∞—Ä—Ç—É: {m.text} –±—É–¥—É—Ç –≤—ã–≤–µ–¥–µ–Ω—ã —Å—Ä–µ–¥—Å—Ç–≤–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É: """)
    await Withdraw.InputAmount.set()


async def user_input_withdraw_amount(m: types.Message, repo: Repo, state: FSMContext):
    try:
        amount = float(m.text.replace(",", "."))
    except ValueError:
        await m.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        return

    user = await repo.get_user(m.from_user.id)
    if user["balance"] < amount:
        await m.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å - {user['balance']}$")
        return
    async with state.proxy() as data:
        data["amount"] = amount

        await m.answer(f"""–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ/–æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –∏—Ö:
–ö–∞—Ä—Ç–∞: {data["card"]}
–°—É–º–º–∞: {data["amount"]}$""", reply_markup=withdraw_confirmation_kb)
    await Withdraw.Confirm.set()


async def user_accept_withdraw(c: types.CallbackQuery, repo: Repo, state: FSMContext):
    async with state.proxy() as data:
        await c.bot.send_message(-1001792579223, f"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <a href='tg://user?id={c.from_user.id}'>{c.from_user.full_name}</a> –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–≤–æ–¥ 
<b>–°—É–º–º–∞:</b> {data["amount"]}$
<b>–°—É–º–º–∞ —Å –∫–æ–º–∏—Å—Å–∏–µ–π:</b> {data["amount"] * 0.98}$
<b>–ö–∞—Ä—Ç–∞:</b> {data["card"]}
        """, reply_markup=get_withdraw_kb(c.from_user.id, data["amount"]))
        await c.message.delete()
        await c.message.answer(f"""
–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: 
ID: <a href='tg://user?id={c.from_user.id}'>{c.from_user.full_name}</a>
–ö–∞—Ä—Ç–∞: {data["card"]}
–°—É–º–º–∞: {data["amount"]}$
–°—É–º–º–∞ —Å –∫–æ–º–∏—Å—Å–∏–µ–π: {data["amount"] * 0.98}$
        """, reply_markup=user_mm_kb)
        await repo.update_user(c.from_user.id, {"$set": {"user_name": c.from_user.full_name}, "$inc": {"balance": -data["amount"], "to_withdraw": data["amount"]}})
    await state.finish()


async def user_purchases(m: types.Message, repo: Repo):
    user = await repo.get_user(m.from_user.id)
    await m.answer(f"""
<b>üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {user["stats"]["summary"]["clicks"]}
<b>üí∞–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç:</b> {user["stats"]["summary"]["profit_from_purchases"]}$
<b>‚≠êÔ∏è–¢–æ–≤–∞—Ä–∞ –∫—É–ø–∏–ª–∏:</b> {user["stats"]["summary"]["purchases"]}

<b>–í–∞—à % —Å –ø—Ä–æ–¥–∞–∂:</b> {user["profit_percent"]}%
<b>–¶–µ–Ω–∞ –∑–∞ –∫–ª–∏–∫:</b> {user["reward_per_click"]}$
""", reply_markup=balance_kb)


def register_user(dp: Dispatcher):
    dp.register_message_handler(user_start, text=["–û—Ç–º–µ–Ω–∞"], state="*")
    dp.register_message_handler(user_start, commands=["start"], state="*")
    dp.register_message_handler(user_help, text="–ü–æ–º–æ—â—å üÜò", state="*")
    dp.register_message_handler(user_referral, text="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ üìà", state="*")
    dp.register_message_handler(user_links, text="–ú–æ–∏ —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∏ üîó", state="*")
    dp.register_message_handler(user_balance, text="–ë–∞–ª–∞–Ω—Å üí∞", state="*")
    dp.register_message_handler(user_purchases, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∫–∞—Ö", state="*")

    dp.register_callback_query_handler(user_withdraw, text="withdraw", state="*")
    dp.register_message_handler(user_input_card, state=Withdraw.InputCard)
    dp.register_message_handler(user_input_withdraw_amount, state=Withdraw.InputAmount)

    dp.register_callback_query_handler(user_withdraw, user_wc_cd.filter(action="decline"), state=Withdraw.Confirm)
    dp.register_callback_query_handler(user_accept_withdraw, user_wc_cd.filter(action="accept"), state=Withdraw.Confirm)
